{"version":3,"file":"static/js/147.736cecd6.chunk.js","mappings":"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","sources":["components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Loader/Loader.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","helpers/getRandomHexColor.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/ContactsPage.js","redux/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FilterName = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  font-weight: 700;\n  font-size: 12px;\n  color: #333;\n\n  transition: color 300ms ease, font-size 300ms ease;\n\n  :focus-within {\n    color: #000;\n    font-size: 14px;\n  }\n`;\n\nexport const IconWrapper = styled.div`\n  position: absolute;\n  top: 55%;\n  left: 10px;\n  transition: color 300ms ease;\n  color: ${props => (props.isEmptyFilter ? '#f4442e' : '#777')};\n`;\n\nexport const LabelP = styled.p`\n  margin-left: 6px;\n  height: 16px;\n`;\n\nexport const FilterInput = styled.input`\n  min-width: 180px;\n  padding: 8px;\n  padding-left: 26px;\n  border: 1px solid #ccc;\n  border-color: 2ecc71;\n  border-radius: 10px;\n  color: #333;\n  outline: none;\n  transition: border-color 300ms ease;\n\n  :hover,\n  :focus {\n    border-color: ${props => (props.isEmptyFilter ? '#f4442e' : '#2ecc71')};\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { DebounceInput } from 'react-debounce-input';\nimport { BsSearch } from 'react-icons/bs';\nimport { setFilter } from 'redux/slices/filterSlice';\nimport {\n  FilterName,\n  LabelP,\n  FilterInput,\n  IconWrapper,\n} from './Filter.styled';\nimport {\n  selectFilter,\n  memoizedFilteredContactsSelector,\n} from 'redux/selectors';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const filteredContacts = useSelector(memoizedFilteredContactsSelector);\n\n  const isEmptyFilter = filteredContacts.length === 0;\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(setFilter(filter));\n  }, [filter, dispatch]);\n\n  const onChangeFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <FilterName>\n      <IconWrapper isEmptyFilter={isEmptyFilter}>\n        <BsSearch />\n      </IconWrapper>\n      <LabelP>Find contacts by Name</LabelP>\n      <DebounceInput\n        element={FilterInput}\n        type=\"text\"\n        value={filter}\n        debounceTimeout={500}\n        onChange={onChangeFilter}\n        isEmptyFilter={isEmptyFilter}\n      />\n    </FilterName>\n  );\n};\n\nexport default Filter;\n","import { ProgressBar, ThreeDots, RotatingLines } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <ProgressBar   \n      ariaLabel=\"progress-bar-loading\"\n      wrapperStyle={{\n        position: 'absolute',\n        top: -27,\n        left: -4,\n        borderRadius: '0px',\n        zIndex: 1,\n      }}\n      wrapperClass=\"progress-bar-wrapper\"\n      borderColor=\"\"\n      barColor=\"rgb(244, 68, 46, 0.6)\"\n    />\n  );\n};\n\nconst LoaderThreeDots = () => {\n  return (\n    <ThreeDots\n      height=\"20\"\n      width=\"60\"\n      radius=\"1\"\n      color=\"#27ae60\"\n      ariaLabel=\"three-dots-loading\"\n      wrapperStyle={{\n      }}\n      wrapperClassName=\"\"\n      visible={true}\n    />\n  );\n};\n\nconst LoaderRotatingLines = () => {\n  return (\n    <div>\n      <RotatingLines\n        strokeColor=\"#fff\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"60\"\n        visible={true}\n      />\n    </div>\n  );\n};\n\nexport { Loader, LoaderThreeDots, LoaderRotatingLines };\n","import styled, { keyframes } from 'styled-components';\n\nconst fadeOut = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  to {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n`;\n\nexport const ContactLi = styled.li`\n  display: flex;\n`;\n\nexport const FirstLetterContactsGroupDiv = styled.div`\n  font-size: 16px;\n`;\n\nexport const ContactContainerDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  min-width: 210px;\n  border: 1px solid #27ae60;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n`;\n\nexport const FirstLetterNameDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 32px;\n  min-height: 32px;\n  font-size: 14px;\n  color: #fff;\n  border-radius: 50%;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: background-color 300ms, color 250ms ease;\n`;\n\nexport const ContactCardDiv = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 4px 8px;\n  gap: 10px;\n`;\n\nexport const ContactContentP = styled.p`\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n  width: 100%;\n  cursor: pointer;\n`;\n\nexport const NameSpan = styled.span`\n  font-size: 16px;\n`;\nexport const PhoneSpan = styled.span`\n  font-size: 12px;\n`;\n\nexport const CallA = styled.a`\n  padding-left: 20px;\n  cursor: default;\n`;\n\nexport const ContainerIconSpan = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  font-size: 14px;\n  background-color: #27ae60;\n  color: #fff;\n  border-radius: 50%;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: background-color 300ms, color 250ms ease;\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    background-color: #2ecc71;\n  }\n`;\n\nexport const ContactActionsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-top: 1px solid #27ae60;\n  background-color: #e7e7e7;\n  border-radius: 8px;\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n  gap: 60px;\n  padding: 8px 8px;\n  animation: ${({ open }) => (open ? fadeIn : fadeOut)} 300ms ease;\n`;\n\nexport const EditContactDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2px 4px;\n  gap: 4px;\n  width: 60px;\n  height: 22px;\n  font-size: 14px;\n  background-color: #27ae60;\n  color: #fff;\n  outline: none;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: background-color 300ms, color 250ms ease;\n\n  :hover,\n  :focus {\n    background-color: #fff;\n    color: #27ae60;\n  }\n`;\n\nexport const ContactBtn = styled.button`\n  position: relative;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  width: 68px;\n  height: 26px;\n  padding: 6px 4px;\n  font-size: 14px;\n  background-color: #f4442e;\n  color: #fff;\n  outline: none;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: background-color 300ms ease;\n\n  :hover,\n  :focus,\n  :active {\n    background-color: #fff;\n    color: #f4442e;\n  }\n\n  :disabled {\n    background-color: #f4442e;\n    color: #fff;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BsPencil, BsTelephone, BsDashCircle } from 'react-icons/bs';\nimport TextTruncate from 'react-text-truncate';\nimport { deleteContact } from 'redux/operations/contactsOperations';\nimport { uniqueFirstLettersContactsSelector } from 'redux/selectors';\nimport {\n  ContactLi,\n  FirstLetterContactsGroupDiv,\n  ContactContainerDiv,\n  FirstLetterNameDiv,\n  ContactCardDiv,\n  ContactContentP,\n  NameSpan,\n  PhoneSpan,\n  CallA,\n  ContainerIconSpan,\n  ContactActionsContainer,\n  EditContactDiv,\n  ContactBtn,\n} from './ContactItem.styled';\nimport { Loader } from '../Loader/Loader';\nimport {getRandomHexColor} from '../../helpers/getRandomHexColor'\n\nconst ContactItem = ({ contact, selectedContactId, toggleActions }) => {\n  const uniqueFirstLetters = useSelector(uniqueFirstLettersContactsSelector);\n\n  const dispatch = useDispatch();\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [contactColors, setContactColors] = useState({});\n\n  const { id, name, phone } = contact;\n  const isActionsContainerOpen = selectedContactId === contact.id;\n\n  useEffect(() => {\n    // Generate and store a random color for the contact's ID when the component mounts.\n    if (!contactColors[contact.id]) {\n      const newColor = getRandomHexColor();\n      setContactColors((prevColors) => ({\n        ...prevColors,\n        [contact.id]: newColor,\n      }));\n    }\n  }, [contact.id, contactColors]);\n\n  const onDeleteContact = contactId => {\n    setIsDeleting(true);\n    dispatch(deleteContact(contactId)).finally(() => {\n      setIsDeleting(false);\n    });\n  };\n\n  return (\n    <ContactLi>\n      <div style={{ width: '15px', height: '20px' }}>\n        {uniqueFirstLetters.includes(id) && (\n          <FirstLetterContactsGroupDiv>\n            {name.charAt(0)}\n          </FirstLetterContactsGroupDiv>\n        )}\n      </div>\n      <ContactContainerDiv>\n        <ContactCardDiv>\n          <FirstLetterNameDiv style={{ backgroundColor: contactColors[contact.id] }}>\n            {name.charAt(0)}\n          </FirstLetterNameDiv>\n          <ContactContentP onClick={() => toggleActions(id)}>\n            <NameSpan>\n              <TextTruncate\n                line={1}\n                element=\"span\"\n                truncateText=\"...\"\n                text={name}\n              />\n            </NameSpan>\n            <PhoneSpan>{phone}</PhoneSpan>\n          </ContactContentP>\n          <CallA href={`tel:${phone}`} title=\"Call\">\n            <ContainerIconSpan>\n              <BsTelephone />\n            </ContainerIconSpan>\n          </CallA>\n        </ContactCardDiv>\n\n        {isActionsContainerOpen && (\n          <ContactActionsContainer>\n            <EditContactDiv>\n              <BsPencil />\n              Edit\n            </EditContactDiv>\n            <ContactBtn\n              type=\"button\"\n              disabled={isDeleting}\n              onClick={() => onDeleteContact(contact.id)}\n            >\n              <BsDashCircle />\n              {isDeleting && <Loader />}\n              Delete\n            </ContactBtn>\n          </ContactActionsContainer>\n        )}\n      </ContactContainerDiv>\n    </ContactLi>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n  selectedContactId: PropTypes.string,\n  toggleActions: PropTypes.func,\n};\n\nexport default ContactItem;\n","export const getRandomHexColor = () => {\n  const minChannelValue = 40; // Adjust this value to control the minimum brightness of the color\n\n  let randomColor;\n  do {\n    randomColor = `#${Math.floor(Math.random() * 16777215)\n      .toString(16)\n      .padStart(6, '0')}`;\n\n    // Parse the color to get individual RGB channel values\n    const r = parseInt(randomColor.substring(1, 3), 10);\n    const g = parseInt(randomColor.substring(3, 5), 16);\n    const b = parseInt(randomColor.substring(5, 7), 8);\n\n    // Check if any channel is below the minimum threshold\n    if (r < minChannelValue || g < minChannelValue || b < minChannelValue) {\n      continue; // Regenerate a new color if any channel is too low\n    }\n\n    // Combine the RGB channels and convert back to hex format\n    randomColor = `#${((r << 16) | (g << 8) | b).toString(16).padStart(6, '0')}`;\n  } while (!randomColor);\n\n  return randomColor;\n};","import styled from 'styled-components';\n\nexport const ContactsSection = styled.section`\n  padding: 30px 0;\n`\nexport const ContactUl = styled.ul`\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nexport const LoaderContainer = styled.div`\ndisplay: flex;\njustify-content: center;\n  padding-top: 10px;\n  margin: 0;\n  height: 30px;\n`;\n\nexport const LoaderRotatingLinesContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgb(247, 247, 247, 0.3);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  backdrop-filter: blur(4px);\n`;\n\nexport const EmptyContactsMessage = styled.p`\n  padding: 0;\n  margin: 20px;\n  font-size: 24px;\n  text-align: center;\n`;","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { LoaderThreeDots, LoaderRotatingLines } from '../Loader/Loader';\nimport ContactItem from '../ContactItem';\nimport { fetchContacts } from 'redux/operations/contactsOperations';\nimport {\n  contactsSelector,\n  isLoadingSelector,\n  errorSelector,\n  memoizedFilteredContactsSelector,\n} from 'redux/selectors';\nimport {\n  ContactsSection,\n  LoaderContainer,\n  LoaderRotatingLinesContainer,\n  ContactUl,\n  EmptyContactsMessage,\n} from './ContactList.styled';\n\nconst ContactList = () => {\n  const isLoading = useSelector(isLoadingSelector);\n  const error = useSelector(errorSelector);\n  const filteredContacts = useSelector(memoizedFilteredContactsSelector);\n  const contacts = useSelector(contactsSelector);\n\n  const [isFetchingContacts, setIsFetchingContacts] = useState(false);\n  const [showEmptyMessage, setShowEmptyMessage] = useState(false);\n  const [selectedContactId, setSelectedContactId] = useState(null);\n\n\n  const dispatch = useDispatch();\n\n  const contactsLength = contacts.length;\n  const isEmptyFilter = filteredContacts.length === 0;\n\n  useEffect(() => {\n    setIsFetchingContacts(true);\n    dispatch(fetchContacts()).finally(() => {\n      setIsFetchingContacts(false);\n      setShowEmptyMessage(true);\n    });\n  }, [dispatch]);\n\n  useEffect(() => {\n    error && toast.error(error);\n  }, [error]);\n\n  const toggleActions = (contactId) => {\n    setSelectedContactId((prevId) => (prevId === contactId ? null : contactId));\n  };\n\n  if (isFetchingContacts) {\n    return (\n      <LoaderRotatingLinesContainer>\n        <LoaderRotatingLines />\n      </LoaderRotatingLinesContainer>\n    );\n  }\n\n  if (contactsLength === 0 && showEmptyMessage && !error) {\n    return (\n      <EmptyContactsMessage>Please add your first contact</EmptyContactsMessage>\n    );\n  }\n\n  if (contactsLength > 0 && isEmptyFilter) {\n    return <EmptyContactsMessage>No matching contacts</EmptyContactsMessage>;\n  }\n\n  return (\n    <ContactsSection>\n      <LoaderContainer>\n        {isLoading && showEmptyMessage && <LoaderThreeDots />}\n      </LoaderContainer>\n      {!isEmptyFilter && (\n        <ContactUl>\n          {filteredContacts.map(contact => (\n            <ContactItem\n              key={contact.id}\n              contact={contact}\n              selectedContactId={selectedContactId}\n              toggleActions={toggleActions}\n            />\n          ))}\n        </ContactUl>\n      )}\n    </ContactsSection>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  margin-bottom: 30px;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n`;\n\nexport const LabelForm = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  font-weight: 700;\n  font-size: 12px;\n  color: #333;\n  transition: color 300ms ease;\n  transition: font-size 300ms ease;\n\n  :focus-within {\n    color: #000;\n    font-size: 14px;\n  }\n`;\n\nexport const IconWrapper = styled.div`\n  position: absolute;\n  top: 55%;\n  left: 10px;\n  transition: color 300ms ease;\n  color: #777;\n`;\n\nexport const LabelSpan = styled.span`\n  margin-left: 6px;\n  height: 16px;\n`;\n\nexport const InputForm = styled.input`\n  min-width: 180px;\n  padding: 8px;\n  padding-left: 26px;\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  color: #333;\n  outline: none;\n  transition: border-color 300ms ease;\n\n  :hover,\n  :focus {\n    border-color: #27ae60;\n  }\n\n  :not(:placeholder-shown):required:valid {\n    border-color: #27ae60;\n  }\n\n  :not(:placeholder-shown):required:invalid {\n    border-color: #f4442e;\n  }\n\n  ::placeholder {\n    color: #777;\n  }\n`;\n\nexport const BtnForm = styled.button`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 5px;\n  width: 100%;\n  padding: 10px;\n  background-color: #27ae60;\n  color: #fff;\n  outline: none;\n  border: none;\n  border-radius: 10px;\n  cursor: ${props => (props.isLoading ? 'not-allowed' : 'pointer')};\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: background-color 300ms ease;\n\n  :hover,\n  :focus {\n    background-color: ${props => (props.isLoading ? '#27ae60' : '#2ecc71')};\n  }\n`;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BsPersonPlus, BsTelephonePlus } from 'react-icons/bs';\nimport { addContact } from 'redux/operations/contactsOperations';\nimport { isLoadingSelector } from 'redux/selectors';\nimport {\n  FormContainer,\n  Form,\n  IconWrapper,\n  LabelForm,\n  LabelSpan,\n  InputForm,\n  BtnForm,\n} from './ContactForm.styled';\n\nfunction ContactForm() {\n  const isLoading = useSelector(isLoadingSelector);\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setPhone] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value.replace(/(^|\\s)\\S/g, match => match.toUpperCase()));\n        break;\n\n      case 'number':\n        setPhone(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleAddContact = e => {\n    e.preventDefault();\n\n    dispatch(addContact({ name, number }));\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <FormContainer>\n      <Form onSubmit={handleAddContact}>\n        <LabelForm>\n          <IconWrapper>\n            <BsPersonPlus />\n          </IconWrapper>\n          <LabelSpan>Name</LabelSpan>\n          <InputForm\n            type=\"text\"\n            value={name}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-ЯґҐєЄіІїЇ]+(([' \\-][a-zA-Zа-яА-ЯґҐєЄіІїЇ ])?[a-zA-Zа-яА-ЯґҐєЄіІїЇ]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            placeholder=\"Enter name\"\n            onChange={handleChange}\n          />\n        </LabelForm>\n        <LabelForm>\n          <IconWrapper>\n            <BsTelephonePlus />\n          </IconWrapper>\n          <LabelSpan>Number</LabelSpan>\n          <InputForm\n            type=\"tel\"\n            value={number}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            placeholder=\"Enter phone number\"\n            onChange={handleChange}\n          />\n        </LabelForm>\n\n        <BtnForm type=\"submit\" isLoading={isLoading} disabled={isLoading}>\n          Add contact\n        </BtnForm>\n      </Form>\n    </FormContainer>\n  );\n}\n\nexport default ContactForm;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport  Filter  from '../components/Filter';\nimport ContactList  from '../components/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { isLoadingSelector } from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations/contactsOperations';\n\nexport default function ContactsPage () {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(isLoadingSelector);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your Contacts</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const contactsSelector = state => state.contacts.items;\n\nconst memoizedContactsSelector = createSelector(contactsSelector, contacts =>\n  [...contacts].sort((a, b) => a.name.localeCompare(b.name))\n);\n\nexport const isLoadingSelector = state => state.contacts.isLoading;\nexport const errorSelector = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const memoizedFilteredContactsSelector = createSelector(\n  [memoizedContactsSelector, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n\nexport const uniqueFirstLettersContactsSelector = createSelector(\n  [memoizedFilteredContactsSelector],\n  (filteredContacts) => {\n    const firstLetters = {};\n\n    filteredContacts.forEach((contact) => {\n      const firstLetter = contact.name.charAt(0).toUpperCase();\n      if (!firstLetters[firstLetter]) {\n        firstLetters[firstLetter] = contact.id;\n      }\n    });\n\n    return Object.values(firstLetters);\n  }\n);\n"],"names":["FilterName","styled","IconWrapper","props","isEmptyFilter","LabelP","FilterInput","filter","useSelector","selectFilter","memoizedFilteredContactsSelector","length","dispatch","useDispatch","useEffect","setFilter","DebounceInput","element","type","value","debounceTimeout","onChange","e","target","Loader","ariaLabel","wrapperStyle","position","top","left","borderRadius","zIndex","wrapperClass","borderColor","barColor","LoaderThreeDots","height","width","radius","color","wrapperClassName","visible","LoaderRotatingLines","strokeColor","strokeWidth","animationDuration","fadeOut","keyframes","fadeIn","ContactLi","FirstLetterContactsGroupDiv","ContactContainerDiv","FirstLetterNameDiv","ContactCardDiv","ContactContentP","NameSpan","PhoneSpan","CallA","ContainerIconSpan","ContactActionsContainer","open","EditContactDiv","ContactBtn","contact","selectedContactId","toggleActions","uniqueFirstLetters","uniqueFirstLettersContactsSelector","useState","isDeleting","setIsDeleting","contactColors","setContactColors","id","name","phone","isActionsContainerOpen","newColor","randomColor","Math","floor","random","toString","padStart","r","parseInt","substring","g","b","getRandomHexColor","prevColors","style","includes","charAt","backgroundColor","onClick","line","truncateText","text","href","title","disabled","contactId","deleteContact","finally","ContactsSection","ContactUl","LoaderContainer","LoaderRotatingLinesContainer","EmptyContactsMessage","isLoading","isLoadingSelector","error","errorSelector","filteredContacts","contacts","contactsSelector","isFetchingContacts","setIsFetchingContacts","showEmptyMessage","setShowEmptyMessage","setSelectedContactId","contactsLength","fetchContacts","toast","prevId","map","FormContainer","Form","LabelForm","LabelSpan","InputForm","BtnForm","setName","number","setPhone","handleChange","currentTarget","replace","match","toUpperCase","onSubmit","preventDefault","addContact","pattern","required","placeholder","ContactsPage","Helmet","state","items","memoizedContactsSelector","createSelector","sort","a","localeCompare","normalizedFilter","toLowerCase","firstLetters","forEach","firstLetter","Object","values"],"sourceRoot":""}