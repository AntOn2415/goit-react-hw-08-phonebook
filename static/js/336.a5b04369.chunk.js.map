{"version":3,"file":"static/js/336.a5b04369.chunk.js","mappings":"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","sources":["components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Loader/Loader.jsx","components/ContactItem/ContactItem.styled.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/ContactFormEdit/ContactFormEdit.styled.jsx","components/ContactFormEdit/ContactFormEdit.jsx","components/ContactItem/ContactItem.jsx","helpers/getRandomHexColor.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/ContactsPage.js","redux/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FilterContainer = styled.div`\n  position: sticky;\n  top: 0;\n  z-index: 1;\n  background-color: #f2f2f2;\n`;\n\nexport const FilterName = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  font-weight: 700;\n  font-size: 12px;\n  color: #333;\n\n  transition: color 300ms ease, font-size 300ms ease;\n\n  :focus-within {\n    color: #000;\n    font-size: 14px;\n  }\n`;\n\nexport const IconWrapper = styled.div`\n  position: absolute;\n  top: 55%;\n  left: 10px;\n  transition: color 300ms ease;\n  color: ${props => (props.isEmptyFilter ? '#f4442e' : '#777')};\n`;\n\nexport const LabelP = styled.p`\n  margin-left: 6px;\n  height: 16px;\n`;\n\nexport const FilterInput = styled.input`\n  min-width: 180px;\n  padding: 8px;\n  padding-left: 26px;\n  border: 1px solid #ccc;\n  border-color: 2ecc71;\n  border-radius: 10px;\n  color: #333;\n  outline: none;\n  transition: border-color 300ms ease;\n\n  :hover,\n  :focus {\n    border-color: ${props => (props.isEmptyFilter ? '#f4442e' : '#2ecc71')};\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { DebounceInput } from 'react-debounce-input';\nimport { BsSearch } from 'react-icons/bs';\nimport { setFilter } from 'redux/slices/filterSlice';\nimport {\n  FilterContainer,\n  FilterName,\n  LabelP,\n  FilterInput,\n  IconWrapper,\n} from './Filter.styled';\nimport {\n  selectFilter,\n  memoizedFilteredContactsSelector,\n} from 'redux/selectors';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const filteredContacts = useSelector(memoizedFilteredContactsSelector);\n\n  const isEmptyFilter = filteredContacts.length === 0;\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(setFilter(filter));\n  }, [filter, dispatch]);\n\n  const onChangeFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <FilterContainer>\n      <FilterName>\n      <IconWrapper isEmptyFilter={isEmptyFilter}>\n        <BsSearch />\n      </IconWrapper>\n      <LabelP>Find contacts by Name</LabelP>\n      <DebounceInput\n        element={FilterInput}\n        type=\"text\"\n        value={filter}\n        debounceTimeout={500}\n        onChange={onChangeFilter}\n        isEmptyFilter={isEmptyFilter}\n      />\n    </FilterName>\n    </FilterContainer>\n    \n  );\n};\n\nexport default Filter;\n","import { ProgressBar, ThreeDots, RotatingLines } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <ProgressBar   \n      ariaLabel=\"progress-bar-loading\"\n      wrapperStyle={{\n        position: 'absolute',\n        top: -27,\n        left: -4,\n        borderRadius: '0px',\n        zIndex: 1,\n      }}\n      wrapperClass=\"progress-bar-wrapper\"\n      borderColor=\"\"\n      barColor=\"rgb(244, 68, 46, 0.6)\"\n    />\n  );\n};\n\nconst LoaderThreeDots = () => {\n  return (\n    <ThreeDots\n      height=\"20\"\n      width=\"60\"\n      radius=\"1\"\n      color=\"#27ae60\"\n      ariaLabel=\"three-dots-loading\"\n      wrapperStyle={{\n      }}\n      wrapperClassName=\"\"\n      visible={true}\n    />\n  );\n};\n\nconst LoaderRotatingLines = () => {\n  return (\n    <div>\n      <RotatingLines\n        strokeColor=\"#fff\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"60\"\n        visible={true}\n      />\n    </div>\n  );\n};\n\nexport { Loader, LoaderThreeDots, LoaderRotatingLines };\n","import styled, { keyframes } from 'styled-components';\n\nconst fadeOut = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  to {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n`;\n\nexport const ContactLi = styled.li`\n  display: flex;\n`;\n\nexport const FirstLetterContactsGroupDiv = styled.div`\n  font-size: 16px;\n`;\n\nexport const ContactContainerDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  min-width: 210px;\n  border: 1px solid #27ae60;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n\n  :hover{\n    :hover{\n      border: 1px solid #2ecc71;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n  }\n  }\n`;\n\nexport const FirstLetterNameDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 32px;\n  min-height: 32px;\n  font-size: 14px;\n  color: #fff;\n  border-radius: 50%;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n`;\n\nexport const ContactCardDiv = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 4px 8px;\n  gap: 10px;\n`;\n\nexport const ContactContentP = styled.p`\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n  width: 100%;\n  cursor: pointer;\n`;\n\nexport const NameSpan = styled.span`\nwhite-space: nowrap;\n  font-size: 16px;\n`;\nexport const PhoneSpan = styled.span`\n  font-size: 12px;\n`;\n\nexport const CallA = styled.a`\n  padding-left: 20px;\n  cursor: default;\n`;\n\nexport const ContainerIconSpan = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  font-size: 14px;\n  background-color: #27ae60;\n  color: #fff;\n  border-radius: 50%;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: background-color 300ms, color 250ms ease;\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    background-color: #2ecc71;\n  }\n`;\n\nexport const ContactActionsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-top: 1px solid #27ae60;\n  background-color: #e7e7e7;\n  border-radius: 8px;\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n  gap: 60px;\n  padding: 8px 8px;\n  animation: ${({ open }) => (open ? fadeIn : fadeOut)} 300ms ease;\n`;\n\nexport const EditContactBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2px 4px;\n  gap: 4px;\n  width: 68px;\n  height: 26px;\n  font-size: 14px;\n  background-color: #27ae60;\n  color: #fff;\n  outline: none;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: box-shadow 300ms, background-color 300ms, color 250ms ease;\n\n  :hover,\n  :focus {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    background-color: #fff;\n    color: #27ae60;\n  }\n`;\n\nexport const ContactBtn = styled.button`\n  position: relative;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  width: 68px;\n  height: 26px;\n  padding: 6px 4px;\n  font-size: 14px;\n  background-color: #f4442e;\n  color: #fff;\n  outline: none;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: box-shadow 300ms, background-color 300ms, color 250ms ease;\n\n  :hover,\n  :focus,\n  :active {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    background-color: #fff;\n    color: #f4442e;\n  }\n\n  :disabled {\n    background-color: #f4442e;\n    color: #fff;\n  }\n`;\n\nexport const ModalContent = styled.div`\n  padding: 60px 20px;\n  width: 350px;\n  height: 450px;\n  background-color: #f2f2f2;\n`","import styled from \"styled-components\";\n\nexport const ModalOverlay = styled.div`\nposition: fixed;\ntop: 0;\nleft: 0;\nwidth: 100vw;\nheight: 100vh;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nbackground-color: rgba(0, 0, 0, 0.8);\nz-index: 1200;\n`\nexport const ModalContent = styled.div`\nmax-width: calc(100vw - 48px);\nmax-height: calc(100vh - 24px);\n`","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\nimport { ModalOverlay, ModalContent } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nfunction Modal({ onClose, children }) {\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]);\n\n  return createPortal(\n    <ModalOverlay onClick={onClose}>\n      <ModalContent>{children}</ModalContent>\n    </ModalOverlay>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Modal;\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  margin-bottom: 30px;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n`;\n\nexport const LabelForm = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  font-weight: 700;\n  font-size: 12px;\n  color: #333;\n  transition: color 300ms ease;\n  transition: font-size 300ms ease;\n\n  :focus-within {\n    color: #000;\n    font-size: 14px;\n  }\n`;\n\nexport const IconWrapper = styled.div`\n  position: absolute;\n  top: 55%;\n  left: 10px;\n  transition: color 300ms ease;\n  color: #777;\n\n\n`;\n\nexport const LabelSpan = styled.span`\n  margin-left: 6px;\n  height: 16px;\n`;\n\nexport const InputForm = styled.input`\n  min-width: 180px;\n  padding: 8px;\n  padding-left: 26px;\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  color: #333;\n  outline: none;\n  transition: border-color 300ms ease;\n\n  :hover,\n  :focus {\n    border-color: #27ae60;\n  }\n\n  :not(:placeholder-shown):required:valid {\n    border-color: #27ae60;\n  }\n\n  :not(:placeholder-shown):required:invalid {\n    border-color: #f4442e;\n  }\n\n  ::placeholder {\n    color: #777;\n  }\n`;\n\nexport const BtnForm = styled.button`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 5px;\n  width: 100%;\n  padding: 10px;\n  background-color: #27ae60;\n  color: #fff;\n  outline: none;\n  border: none;\n  border-radius: 10px;\n  cursor: ${props => (props.isLoading ? 'not-allowed' : 'pointer')};\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: box-shadow 300ms, background-color 300ms ease;\n  \n\n  :hover,\n  :focus {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    background-color: ${props => (props.isLoading ? '#27ae60' : '#2ecc71')};\n  }\n`;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BsPersonPlus, BsTelephonePlus } from 'react-icons/bs';\nimport { editContact } from 'redux/operations/contactsOperations';\nimport { isLoadingSelector } from 'redux/selectors';\nimport {\n  FormContainer,\n  Form,\n  IconWrapper,\n  LabelForm,\n  LabelSpan,\n  InputForm,\n  BtnForm,\n} from './ContactFormEdit.styled';\n\nfunction ContactFormEdit({contact}) {\n  const isLoading = useSelector(isLoadingSelector);\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value.replace(/(^|\\s)\\S/g, match => match.toUpperCase()));\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleEditContact = async (e) => {\n    e.preventDefault();\n\n    try {\n      await dispatch(editContact({ id: contact.id, name, number }));\n    }finally{\n        setName('');\n        setNumber('');\n    }\n  };\n\n  return (\n    <FormContainer>\n      <Form onSubmit={handleEditContact}>\n        <LabelForm>\n          <IconWrapper>\n            <BsPersonPlus />\n          </IconWrapper>\n          <LabelSpan>Name</LabelSpan>\n          <InputForm\n            type=\"text\"\n            value={name}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-ЯґҐєЄіІїЇ]+(([' \\-][a-zA-Zа-яА-ЯґҐєЄіІїЇ ])?[a-zA-Zа-яА-ЯґҐєЄіІїЇ]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            placeholder={contact.name}\n            onChange={handleChange}\n          />\n        </LabelForm>\n        <LabelForm>\n          <IconWrapper>\n            <BsTelephonePlus />\n          </IconWrapper>\n          <LabelSpan>Number</LabelSpan>\n          <InputForm\n            type=\"tel\"\n            value={number}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            placeholder={contact.number}\n            onChange={handleChange}\n          />\n        </LabelForm>\n\n        <BtnForm type=\"submit\" isLoading={isLoading} disabled={isLoading}>\n          Edit contact\n        </BtnForm>\n      </Form>\n    </FormContainer>\n  );\n}\n\nexport default ContactFormEdit;\n","import PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BsPencil, BsTelephone, BsDashCircle } from 'react-icons/bs';\nimport { deleteContact } from 'redux/operations/contactsOperations';\nimport { uniqueFirstLettersContactsSelector, modalContactSelector } from 'redux/selectors';\nimport {\n  ContactLi,\n  FirstLetterContactsGroupDiv,\n  ContactContainerDiv,\n  FirstLetterNameDiv,\n  ContactCardDiv,\n  ContactContentP,\n  NameSpan,\n  PhoneSpan,\n  CallA,\n  ContainerIconSpan,\n  ContactActionsContainer,\n  EditContactBtn,\n  ContactBtn,\n  ModalContent \n} from './ContactItem.styled';\nimport { Loader } from '../Loader/Loader';\nimport { getRandomHexColor } from '../../helpers/getRandomHexColor';\nimport Modal from '../Modal'\nimport ContactFormEdit from 'components/ContactFormEdit';\nimport {openModal, closeModal} from 'redux/slices/modalSlice'\n\n\nconst ContactItem = ({ contact, selectedContactId, toggleActions }) => {\n  const uniqueFirstLetters = useSelector(uniqueFirstLettersContactsSelector);\n  const showModal = useSelector(modalContactSelector(contact.id));\n\n  const dispatch = useDispatch();\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [contactColors, setContactColors] = useState({});\n\n  const { id, name, number } = contact;\n  const trimmedName =\n    contact.name.length > 24 ? `${contact.name.slice(0, 20)}...` : contact.name;\n  const isActionsContainerOpen = selectedContactId === contact.id;\n\n  useEffect(() => {\n    if (!contactColors[contact.id]) {\n      const newColor = getRandomHexColor();\n      setContactColors(prevColors => ({\n        ...prevColors,\n        [contact.id]: newColor,\n      }));\n    }\n  }, [contact.id, contactColors]);\n\n  const onDeleteContact = contactId => {\n    setIsDeleting(true);\n    dispatch(deleteContact(contactId)).finally(() => {\n      setIsDeleting(false);\n    });\n  };\n  useEffect(() => {\n    if (selectedContactId === contact.id) {\n      dispatch(openModal());\n    }\n  }, [selectedContactId, contact.id, dispatch]);\n\n  const handleEditButtonClick = () => {\n    dispatch(openModal(contact.id));\n  };\n\n  const handleCloseModal = () => {\n    dispatch(closeModal(contact.id));\n  };\n\n  const handleContentClick = (e) => {\n    e.stopPropagation();\n  };\n\n  return (\n    <ContactLi>\n      <div style={{ width: '15px', height: '20px' }}>\n        {uniqueFirstLetters.includes(id) && (\n          <FirstLetterContactsGroupDiv>\n            {name.charAt(0)}\n          </FirstLetterContactsGroupDiv>\n        )}\n      </div>\n      <ContactContainerDiv>\n        <ContactCardDiv>\n          <FirstLetterNameDiv\n            style={{ backgroundColor: contactColors[contact.id] }}\n          >\n            {name.charAt(0)}\n          </FirstLetterNameDiv>\n          <ContactContentP onClick={() => toggleActions(id)}>\n            <NameSpan>{trimmedName}</NameSpan>\n            <PhoneSpan>{number}</PhoneSpan>\n          </ContactContentP>\n          <CallA href={`tel:${number}`} title=\"Call\">\n            <ContainerIconSpan>\n              <BsTelephone />\n            </ContainerIconSpan>\n          </CallA>\n        </ContactCardDiv>\n\n        {isActionsContainerOpen && (\n          <ContactActionsContainer>\n            <EditContactBtn onClick={handleEditButtonClick}>\n              <BsPencil />\n              Edit\n            </EditContactBtn>\n            <ContactBtn\n              type=\"button\"\n              disabled={isDeleting}\n              onClick={() => onDeleteContact(contact.id)}\n            >\n              <BsDashCircle />\n              {isDeleting && <Loader />}\n              Delete\n            </ContactBtn>\n          </ContactActionsContainer>\n        )}\n      </ContactContainerDiv>\n      {showModal && (\n        <Modal onClose={handleCloseModal}>\n          <ModalContent onClick={handleContentClick}>\n            <ContactFormEdit\n            contact={contact}\n          />\n          </ModalContent>\n        </Modal>\n      )}\n    </ContactLi>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n  selectedContactId: PropTypes.string,\n  toggleActions: PropTypes.func,\n};\n\nexport default ContactItem;\n","export const getRandomHexColor = () => {\n  const minChannelValue = 40; // Adjust this value to control the minimum brightness of the color\n\n  let randomColor;\n  do {\n    randomColor = `#${Math.floor(Math.random() * 16777215)\n      .toString(16)\n      .padStart(6, '0')}`;\n\n    // Parse the color to get individual RGB channel values\n    const r = parseInt(randomColor.substring(1, 3), 10);\n    const g = parseInt(randomColor.substring(3, 5), 16);\n    const b = parseInt(randomColor.substring(5, 7), 8);\n\n    // Check if any channel is below the minimum threshold\n    if (r < minChannelValue || g < minChannelValue || b < minChannelValue) {\n      continue; // Regenerate a new color if any channel is too low\n    }\n\n    // Combine the RGB channels and convert back to hex format\n    randomColor = `#${((r << 16) | (g << 8) | b).toString(16).padStart(6, '0')}`;\n  } while (!randomColor);\n\n  return randomColor;\n};","import styled from 'styled-components';\n\nexport const ContactsSection = styled.section`\n  padding: 0;\n`\nexport const ContactUl = styled.ul`\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 10px;\n  margin: 0;\n  height: 30px;\n`;\n\nexport const LoaderRotatingLinesContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgb(247, 247, 247, 0.3);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  backdrop-filter: blur(4px);\n`;\n\nexport const EmptyContactsMessage = styled.p`\n  padding: 0;\n  margin: 20px;\n  font-size: 24px;\n  text-align: center;\n`;","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { LoaderThreeDots, LoaderRotatingLines } from '../Loader/Loader';\nimport ContactItem from '../ContactItem';\nimport { fetchContacts } from 'redux/operations/contactsOperations';\nimport {\n  contactsSelector,\n  isLoadingSelector,\n  errorSelector,\n  memoizedFilteredContactsSelector,\n} from 'redux/selectors';\nimport {\n  ContactsSection,\n  LoaderContainer,\n  LoaderRotatingLinesContainer,\n  ContactUl,\n  EmptyContactsMessage,\n} from './ContactList.styled';\n\nconst ContactList = () => {\n  const isLoading = useSelector(isLoadingSelector);\n  const error = useSelector(errorSelector);\n  const filteredContacts = useSelector(memoizedFilteredContactsSelector);\n  const contacts = useSelector(contactsSelector);\n\n  const [isFetchingContacts, setIsFetchingContacts] = useState(false);\n  const [showEmptyMessage, setShowEmptyMessage] = useState(false);\n  const [selectedContactId, setSelectedContactId] = useState(null);\n\n\n  const dispatch = useDispatch();\n\n  const contactsLength = contacts.length;\n  const isEmptyFilter = filteredContacts.length === 0;\n\n  useEffect(() => {\n    setIsFetchingContacts(true);\n    dispatch(fetchContacts()).finally(() => {\n      setIsFetchingContacts(false);\n      setShowEmptyMessage(true);\n    });\n  }, [dispatch]);\n\n  useEffect(() => {\n    error && toast.error(error);\n  }, [error]);\n\n  const toggleActions = (contactId) => {\n    setSelectedContactId((prevId) => (prevId === contactId ? null : contactId));\n  };\n\n  if (isFetchingContacts) {\n    return (\n      <LoaderRotatingLinesContainer>\n        <LoaderRotatingLines />\n      </LoaderRotatingLinesContainer>\n    );\n  }\n\n  if (contactsLength === 0 && showEmptyMessage && !error) {\n    return (\n      <EmptyContactsMessage>Please add your first contact</EmptyContactsMessage>\n    );\n  }\n\n  if (contactsLength > 0 && isEmptyFilter) {\n    return <EmptyContactsMessage>No matching contacts</EmptyContactsMessage>;\n  }\n\n  return (\n    <ContactsSection>\n      <LoaderContainer>\n        {isLoading && showEmptyMessage && <LoaderThreeDots />}\n      </LoaderContainer>\n      {!isEmptyFilter && (\n        <ContactUl>\n          {filteredContacts.map(contact => (\n            <ContactItem\n              key={contact.id}\n              contact={contact}\n              selectedContactId={selectedContactId}\n              toggleActions={toggleActions}\n            />\n          ))}\n        </ContactUl>\n      )}\n    </ContactsSection>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  margin-bottom: 30px;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n`;\n\nexport const LabelForm = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  font-weight: 700;\n  font-size: 12px;\n  color: #333;\n  transition: color 300ms ease;\n  transition: font-size 300ms ease;\n\n  :focus-within {\n    color: #000;\n    font-size: 14px;\n  }\n`;\n\nexport const IconWrapper = styled.div`\n  position: absolute;\n  top: 55%;\n  left: 10px;\n  transition: color 300ms ease;\n  color: #777;\n\n\n`;\n\nexport const LabelSpan = styled.span`\n  margin-left: 6px;\n  height: 16px;\n`;\n\nexport const InputForm = styled.input`\n  min-width: 180px;\n  padding: 8px;\n  padding-left: 26px;\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  color: #333;\n  outline: none;\n  transition: border-color 300ms ease;\n\n  :hover,\n  :focus {\n    border-color: #27ae60;\n  }\n\n  :not(:placeholder-shown):required:valid {\n    border-color: #27ae60;\n  }\n\n  :not(:placeholder-shown):required:invalid {\n    border-color: #f4442e;\n  }\n\n  ::placeholder {\n    color: #777;\n  }\n`;\n\nexport const BtnForm = styled.button`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 5px;\n  width: 100%;\n  padding: 10px;\n  background-color: #27ae60;\n  color: #fff;\n  outline: none;\n  border: none;\n  border-radius: 10px;\n  cursor: ${props => (props.isLoading ? 'not-allowed' : 'pointer')};\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: box-shadow 300ms, background-color 300ms ease;\n  \n\n  :hover,\n  :focus {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    background-color: ${props => (props.isLoading ? '#27ae60' : '#2ecc71')};\n  }\n`;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BsPersonPlus, BsTelephonePlus } from 'react-icons/bs';\nimport { addContact } from 'redux/operations/contactsOperations';\nimport { isLoadingSelector } from 'redux/selectors';\nimport {\n  FormContainer,\n  Form,\n  IconWrapper,\n  LabelForm,\n  LabelSpan,\n  InputForm,\n  BtnForm,\n} from './ContactForm.styled';\n\nfunction ContactForm() {\n  const isLoading = useSelector(isLoadingSelector);\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value.replace(/(^|\\s)\\S/g, match => match.toUpperCase()));\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleAddContact = e => {\n    e.preventDefault();\n\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormContainer>\n      <Form onSubmit={handleAddContact}>\n        <LabelForm>\n          <IconWrapper>\n            <BsPersonPlus />\n          </IconWrapper>\n          <LabelSpan>Name</LabelSpan>\n          <InputForm\n            type=\"text\"\n            value={name}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-ЯґҐєЄіІїЇ]+(([' \\-][a-zA-Zа-яА-ЯґҐєЄіІїЇ ])?[a-zA-Zа-яА-ЯґҐєЄіІїЇ]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            placeholder=\"Enter name\"\n            onChange={handleChange}\n          />\n        </LabelForm>\n        <LabelForm>\n          <IconWrapper>\n            <BsTelephonePlus />\n          </IconWrapper>\n          <LabelSpan>Number</LabelSpan>\n          <InputForm\n            type=\"tel\"\n            value={number}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            placeholder=\"Enter phone number\"\n            onChange={handleChange}\n          />\n        </LabelForm>\n\n        <BtnForm type=\"submit\" isLoading={isLoading} disabled={isLoading}>\n          Add contact\n        </BtnForm>\n      </Form>\n    </FormContainer>\n  );\n}\n\nexport default ContactForm;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport  Filter  from '../components/Filter';\nimport ContactList  from '../components/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\n// import { isLoadingSelector } from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations/contactsOperations';\n\nexport default function ContactsPage () {\n  const dispatch = useDispatch();\n  // const isLoading = useSelector(isLoadingSelector);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      {/* <div>{isLoading && }</div> */}\n      <ContactList />\n    </>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const contactsSelector = state => state.contacts.items;\n\nconst memoizedContactsSelector = createSelector(contactsSelector, contacts =>\n  [...contacts].sort((a, b) => a.name.localeCompare(b.name))\n);\n\nexport const isLoadingSelector = state => state.contacts.isLoading;\nexport const errorSelector = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const memoizedFilteredContactsSelector = createSelector(\n  [memoizedContactsSelector, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n\nexport const uniqueFirstLettersContactsSelector = createSelector(\n  [memoizedFilteredContactsSelector],\n  (filteredContacts) => {\n    const firstLetters = {};\n\n    filteredContacts.forEach((contact) => {\n      const firstLetter = contact.name.charAt(0).toUpperCase();\n      if (!firstLetters[firstLetter]) {\n        firstLetters[firstLetter] = contact.id;\n      }\n    });\n\n    return Object.values(firstLetters);\n  }\n);\n\nexport const modalContactSelector = (contactId) => (state) =>\n  state.modal.contactModals[contactId] || false;"],"names":["FilterContainer","styled","FilterName","IconWrapper","props","isEmptyFilter","LabelP","FilterInput","filter","useSelector","selectFilter","memoizedFilteredContactsSelector","length","dispatch","useDispatch","useEffect","setFilter","DebounceInput","element","type","value","debounceTimeout","onChange","e","target","Loader","ariaLabel","wrapperStyle","position","top","left","borderRadius","zIndex","wrapperClass","borderColor","barColor","LoaderThreeDots","height","width","radius","color","wrapperClassName","visible","LoaderRotatingLines","strokeColor","strokeWidth","animationDuration","fadeOut","keyframes","fadeIn","ContactLi","FirstLetterContactsGroupDiv","ContactContainerDiv","FirstLetterNameDiv","ContactCardDiv","ContactContentP","NameSpan","PhoneSpan","CallA","ContainerIconSpan","ContactActionsContainer","open","EditContactBtn","ContactBtn","ModalContent","ModalOverlay","modalRoot","document","querySelector","onClose","children","handleKeyDown","code","window","addEventListener","removeEventListener","createPortal","onClick","FormContainer","Form","LabelForm","LabelSpan","InputForm","BtnForm","isLoading","contact","isLoadingSelector","useState","name","setName","number","setNumber","handleChange","currentTarget","replace","match","toUpperCase","handleEditContact","preventDefault","editContact","id","onSubmit","pattern","title","required","placeholder","disabled","selectedContactId","toggleActions","uniqueFirstLetters","uniqueFirstLettersContactsSelector","showModal","modalContactSelector","isDeleting","setIsDeleting","contactColors","setContactColors","trimmedName","slice","isActionsContainerOpen","newColor","randomColor","Math","floor","random","toString","padStart","r","parseInt","substring","g","b","getRandomHexColor","prevColors","openModal","style","includes","charAt","backgroundColor","href","contactId","deleteContact","finally","closeModal","stopPropagation","ContactsSection","ContactUl","LoaderContainer","LoaderRotatingLinesContainer","EmptyContactsMessage","error","errorSelector","filteredContacts","contacts","contactsSelector","isFetchingContacts","setIsFetchingContacts","showEmptyMessage","setShowEmptyMessage","setSelectedContactId","contactsLength","fetchContacts","toast","prevId","map","addContact","ContactsPage","state","items","memoizedContactsSelector","createSelector","sort","a","localeCompare","normalizedFilter","toLowerCase","firstLetters","forEach","firstLetter","Object","values","modal","contactModals"],"sourceRoot":""}