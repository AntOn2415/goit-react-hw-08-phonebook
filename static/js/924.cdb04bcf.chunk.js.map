{"version":3,"file":"static/js/924.cdb04bcf.chunk.js","mappings":"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","sources":["components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.styled.jsx","helpers/getRandomHexColor.js","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/ContactFormEdit/ContactFormEdit.styled.jsx","components/ContactFormEdit/ContactFormEdit.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/RecentlyAddedContactItem/RecentlyAddedContactItem.styled.jsx","components/RecentlyAddedContactItem/RecentlyAddedContactItem.jsx","components/RecentlyAddedContacts/RecentlyAddedContacts.styled.jsx","components/RecentlyAddedContacts/RecentlyAddedContacts.jsx","components/ContactForm/ContactForm.jsx","components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","pages/ContactsPage.js","redux/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FilterSection = styled.div`\n  position: sticky;\n  top: 0px;\n  z-index: 1;\n  padding-top: 30px;\n  background: linear-gradient(\n    to bottom,\n    rgb(242, 242, 242),\n    rgb(242, 242, 242),\n    rgb(242, 242, 242),\n    rgb(242, 242, 242),\n    rgba(242, 242, 242, 0.2)\n  );\n`;\n\nexport const TitleHiddenH2 = styled.h2`\n   position: absolute;\n  white-space: nowrap;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  border: 0;\n  padding: 0;\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  margin: -1px;\n`\n\nexport const FilterContainer = styled.div`\nposition: relative;\n  padding: 0;\n`;\n\nexport const FilterName = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  font-weight: 700;\n  font-size: 12px;\n  color: #333;\n\n  transition: color 300ms ease, font-size 300ms ease;\n\n  :focus-within {\n    color: #000;\n    font-size: 14px;\n  }\n`;\n\nexport const IconWrapper = styled.div`\n  position: absolute;\n  top: 55%;\n  left: 10px;\n  transition: color 300ms ease;\n  color: ${props => (props.isEmptyFilter ? '#f4442e' : '#777')};\n`;\n\nexport const LabelP = styled.p`\n  margin-left: 6px;\n  height: 16px;\n`;\n\nexport const FilterInput = styled.input`\n  min-width: 180px;\n  padding: 10px;\n  padding-left: 26px;\n  margin-right: 20px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-color: 2ecc71;\n  border-radius: 10px;\n  color: #333;\n  outline: none;\n  transition: border-color 300ms ease;\n\n  :hover,\n  :focus {\n    border-color: ${props => (props.isEmptyFilter ? '#f4442e' : '#2ecc71')};\n  }\n\n  @media screen and (min-width: 716px) {\n    min-width: 200px;\n  }\n\n  @media screen and (min-width: 717px) {\n    min-width: 390px;\n  }\n\n  @media screen and (min-width: 668px) and (max-width: 717px) {\n    max-width: 340px;\n  }\n\n`;\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 10px;\n  margin: 0;\n  height: 30px;\n`;","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { DebounceInput } from 'react-debounce-input';\nimport { BsSearch } from 'react-icons/bs';\nimport { setFilter } from 'redux/slices/filterSlice';\nimport { LoaderThreeDots } from '../Loader/Loader';\nimport {\n  FilterSection,\n  TitleHiddenH2,\n  FilterContainer,\n  FilterName,\n  LabelP,\n  FilterInput,\n  IconWrapper,\n  LoaderContainer,\n} from './Filter.styled';\nimport {\n  selectFilter,\n  memoizedFilteredContactsSelector,\n  isLoadingSelector,\n} from 'redux/selectors';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(isLoadingSelector);\n  const filteredContacts = useSelector(memoizedFilteredContactsSelector);\n\n  const isEmptyFilter = filteredContacts.length === 0;\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(setFilter(filter));\n  }, [filter, dispatch]);\n\n  const onChangeFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  const firstChar = filter.trim().charAt(0);\n\n  let label = 'Find contacts by Name or Number';\n\n  if (firstChar !== '') {\n    label = isNaN(firstChar)\n      ? 'Find contacts by Name'\n      : 'Find contacts by Number';\n  };\n\n  return (\n    <FilterSection>\n      <TitleHiddenH2>Find contacts by Name or Number</TitleHiddenH2>\n      <FilterContainer>\n        <FilterName>\n          <IconWrapper isEmptyFilter={isEmptyFilter}>\n            <BsSearch />\n          </IconWrapper>\n          <LabelP>{label}</LabelP>\n          <DebounceInput\n            element={FilterInput}\n            type=\"text\"\n            value={filter}\n            debounceTimeout={500}\n            onChange={onChangeFilter}\n            isEmptyFilter={isEmptyFilter}\n          />\n        </FilterName>\n        <LoaderContainer>\n        {isLoading && !isEmptyFilter && <LoaderThreeDots />}\n        </LoaderContainer>\n      </FilterContainer>\n    </FilterSection>\n  );\n};\n\nexport default Filter;\n\n\n","import styled, { keyframes } from 'styled-components';\nimport { fadeInDown, fadeInUp } from 'react-animations';\n\nconst fadeInDownAnimation = keyframes`${fadeInDown}`;\nconst fadeInUpAnimation = keyframes`${fadeInUp}`;\n\nexport const ContactLi = styled.li`\n  display: flex;\n`;\n\nexport const ContactContainerDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  min-width: 210px;\n  border: 1px solid #27ae60;\n  border-radius: 10px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: background-color 300ms, border 300ms, box-shadow 300ms ease;\n\n  :hover,\n  :focus {\n    \n    background-color: #f9f9f9;\n    border: 1px solid #2ecc71;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n  }\n\n  animation: 300ms ${fadeInUpAnimation};\n\n  /* @media screen and (max-width: 668px) {\n    min-width: 410px;\n  } */\n\n  @media screen and (min-width: 717px) {\n    min-width: 390px;\n  }\n\n  @media screen and (min-width: 668px) and (max-width: 717px) {\n    max-width: 340px;\n  }\n`;\n\nexport const FirstLetterNameDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 32px;\n  min-height: 32px;\n  font-size: 14px;\n  color: #fff;\n  border-radius: 50%;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n`;\n\nexport const ContactCardDiv = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 4px 8px;\n  gap: 10px;\n`;\n\nexport const ContactContentP = styled.p`\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n  width: 100%;\n  cursor: pointer;\n`;\n\nexport const NameSpan = styled.span`\n  white-space: nowrap;\n  font-size: 16px;\n`;\nexport const PhoneSpan = styled.span`\n  font-size: 12px;\n`;\n\nexport const CallA = styled.a`\n  padding-left: 20px;\n  cursor: default;\n`;\n\nexport const ContainerIconSpan = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  font-size: 14px;\n  background-color: #27ae60;\n  color: #fff;\n  border-radius: 50%;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: background-color 300ms, color 250ms ease;\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    background-color: #2ecc71;\n  }\n`;\n\nexport const ContactActionsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-top: 1px solid #27ae60;\n  background-color: #f9f9f9;\n  border-radius: 10px;\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n  gap: 60px;\n  padding: 8px 8px;\n\n  animation: 300ms ${fadeInDownAnimation};\n`;\n\n\nexport const EditContactBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2px 4px;\n  gap: 4px;\n  width: 68px;\n  height: 26px;\n  font-size: 14px;\n  background-color: #27ae60;\n  color: #fff;\n  outline: none;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: box-shadow 300ms, background-color 300ms, color 250ms ease;\n\n  :hover,\n  :focus {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    background-color: #fff;\n    color: #27ae60;\n  }\n`;\n\nexport const ContactBtn = styled.button`\n  position: relative;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  width: 68px;\n  height: 26px;\n  padding: 6px 4px;\n  font-size: 14px;\n  background-color: #f4442e;\n  color: #fff;\n  outline: none;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: box-shadow 300ms, background-color 300ms, color 250ms ease;\n\n  :hover,\n  :focus,\n  :active {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    background-color: #fff;\n    color: #f4442e;\n  }\n\n  :disabled {\n    background-color: #f4442e;\n    color: #fff;\n  }\n`;\n\nexport const LetterContainerDiv = styled.div`\n  margin-left: 8px;\n  width: 15px;\n  height: 20px;\n`;\n\nexport const FirstLetterContactsGroupDiv = styled.div`\n  font-size: 16px;\n  text-align: center;\n\n`;\n\n","export const getRandomHexColor = () => {\n  const minChannelValue = 40; // Adjust this value to control the minimum brightness of the color\n\n  let randomColor;\n  do {\n    randomColor = `#${Math.floor(Math.random() * 16777215)\n      .toString(16)\n      .padStart(6, '0')}`;\n\n    // Parse the color to get individual RGB channel values\n    const r = parseInt(randomColor.substring(1, 3), 10);\n    const g = parseInt(randomColor.substring(3, 5), 16);\n    const b = parseInt(randomColor.substring(5, 7), 8);\n\n    // Check if any channel is below the minimum threshold\n    if (r < minChannelValue || g < minChannelValue || b < minChannelValue) {\n      continue; // Regenerate a new color if any channel is too low\n    }\n\n    // Combine the RGB channels and convert back to hex format\n    randomColor = `#${((r << 16) | (g << 8) | b)\n      .toString(16)\n      .padStart(6, '0')}`;\n  } while (!randomColor);\n\n  return randomColor;\n};\n","import styled, { keyframes } from 'styled-components';\nimport { fadeIn, fadeOut, zoomIn, zoomOut } from 'react-animations';\n\nconst fadeInAnimation = keyframes`${fadeIn}`;\nconst fadeOutAnimation = keyframes`${fadeOut}`;\n\nconst zoomInAnimation = keyframes`${zoomIn}`;\nconst zoomOutAnimation = keyframes`${zoomOut}`;\n\nexport const ModalBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgb(247, 247, 247, 0.3);\n  backdrop-filter: blur(1px);\n  z-index: 998;\n  overflow-y: scroll;\n  overflow: hidden;\n\n  animation: 500ms ${fadeInAnimation}; // при відкритті */\n  /* animation: 500ms ${fadeOutAnimation}; // при закритті  */\n`;\n\nexport const ModalDiv = styled.div`\n  position: absolute;\n  padding: 60px 20px;\n  min-width: calc(100vw - 100px);\n  min-height: calc(100vh - 300px);\n  background-color: #f2f2f2;\n  border-radius: 18px;\n  border: 1px solid #27ae60;\n\n  animation: 300ms ${zoomInAnimation};\n  /* animation: 300ms ${zoomOutAnimation};// при закритті  */\n`;\n\nexport const CloseBtn = styled.button`\n  position: absolute;\n  top: 12px;\n  right: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  padding: 0;\n  margin: 0;\n  border-radius: 50%;\n  background: inherit;\n  font-size: 60px;\n  background-color: #27ae60;\n  color: #fff;\n  outline: none;\n  border: none;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: box-shadow 300ms, background-color 300ms, color 300ms ease;\n\n  :hover,\n  :focus {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    background-color: #fff;\n    color: #f4442e;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { createPortal } from 'react-dom';\nimport { ModalBackdrop, ModalDiv, CloseBtn } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nfunction Modal({ children, onCloseModal, isOpenModal }) {\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        onCloseModal();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onCloseModal]);\n\n  const handleContentClick = e => {\n    e.stopPropagation();\n  };\n\n  return createPortal(\n    <ModalBackdrop onClick={onCloseModal} showModal={isOpenModal}>\n      <ModalDiv showModal={isOpenModal} onClick={handleContentClick}>\n        <CloseBtn type=\"button\" onClick={onCloseModal}>\n          <RiCloseCircleLine />\n        </CloseBtn>\n        {children}\n      </ModalDiv>\n    </ModalBackdrop>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  contactId: PropTypes.string.isRequired,\n  onCloseModal: PropTypes.func.isRequired,\n  isOpenModal: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Modal;\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  margin-bottom: 30px;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n`;\n\nexport const LabelForm = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  font-weight: 700;\n  font-size: 12px;\n  color: #333;\n  transition: font-size 300ms, color 300ms ease;\n\n  :focus-within {\n    color: #000;\n    font-size: 14px;\n  }\n`;\n\nexport const IconWrapper = styled.div`\n  position: absolute;\n  top: 55%;\n  left: 10px;\n  transition: color 300ms ease;\n  color: #777;\n`;\n\nexport const LabelSpan = styled.span`\n  margin-left: 6px;\n  height: 16px;\n`;\n\nexport const InputForm = styled.input`\n  min-width: 180px;\n  padding: 10px;\n  padding-left: 26px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  color: #333;\n  outline: none;\n  transition: border-color 300ms ease;\n\n  :hover,\n  :focus {\n    border-color: #27ae60;\n  }\n\n  :not(:placeholder-shown):required:valid {\n    border-color: #27ae60;\n  }\n\n  :not(:placeholder-shown):required:invalid {\n    border-color: #f4442e;\n  }\n\n  ::placeholder {\n    color: #777;\n  }\n`;\n\nexport const BtnForm = styled.button`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 5px;\n  width: 100%;\n  padding: 10px;\n  font-size: 16px;\n  background-color: #27ae60;\n  color: #fff;\n  outline: none;\n  border: none;\n  border-radius: 10px;\n  cursor: ${props => (props.isLoading ? 'not-allowed' : 'pointer')};\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: box-shadow 300ms, background-color 300ms ease;\n\n  :hover,\n  :focus {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    background-color: ${props => (props.isLoading ? '#27ae60' : '#2ecc71')};\n  }\n\n  :disabled {\n    background-color: rgba(39, 174, 96, 0.6);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n    cursor: not-allowed;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BsPersonPlus, BsTelephonePlus } from 'react-icons/bs';\nimport { editContact } from 'redux/operations/contactsOperations';\nimport { isLoadingSelector } from 'redux/selectors';\nimport {\n  FormContainer,\n  Form,\n  IconWrapper,\n  LabelForm,\n  LabelSpan,\n  InputForm,\n  BtnForm,\n} from './ContactFormEdit.styled';\n\nfunction ContactFormEdit({ contact, onCloseModal }) {\n  const isLoading = useSelector(isLoadingSelector);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n  const [isModified, setIsModified] = useState(false);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value.replace(/(^|\\s)\\S/g, match => match.toUpperCase()));\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleEditContact = async e => {\n    e.preventDefault();\n\n    try {\n      const editedName = name.trim() === '' ? contact.name : name;\n      const editedNumber = number.trim() === '' ? contact.number : number;\n\n      const patchResponse = await dispatch(\n        editContact({ id: contact.id, name: editedName, number: editedNumber })\n      );\n\n      if (patchResponse.meta.requestStatus === 'fulfilled') {\n        onCloseModal();\n      }\n\n      setIsModified(false);\n    } catch (error) {\n      console.error('Failed to edit contact:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (contact.name !== name || contact.number !== number) {\n      setIsModified(true);\n    } else {\n      setIsModified(false);\n    }\n  }, [contact, name, number]);\n\n  const isButtonDisabled = name.trim() === '' && number.trim() === '';\n\n  return (\n    <FormContainer>\n      <Form onSubmit={handleEditContact}>\n        <LabelForm>\n          <IconWrapper>\n            <BsPersonPlus />\n          </IconWrapper>\n          <LabelSpan>Name</LabelSpan>\n          <InputForm\n            type=\"text\"\n            value={name}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-ЯґҐєЄіІїЇ]+(([' \\-][a-zA-Zа-яА-ЯґҐєЄіІїЇ ])?[a-zA-Zа-яА-ЯґҐєЄіІїЇ]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder={contact.name}\n            onChange={handleChange}\n          />\n        </LabelForm>\n        <LabelForm>\n          <IconWrapper>\n            <BsTelephonePlus />\n          </IconWrapper>\n          <LabelSpan>Number</LabelSpan>\n          <InputForm\n            type=\"tel\"\n            value={number}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder={contact.number}\n            onChange={handleChange}\n          />\n        </LabelForm>\n\n        <BtnForm\n          type=\"submit\"\n          isLoading={isLoading}\n          disabled={isLoading || !isModified || isButtonDisabled}\n        >\n          Edit contact\n        </BtnForm>\n      </Form>\n    </FormContainer>\n  );\n}\n\nexport default ContactFormEdit;\n","import PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BsPencil, BsTelephone, BsDashCircle } from 'react-icons/bs';\nimport { deleteContact } from 'redux/operations/contactsOperations';\nimport { uniqueFirstLettersContactsSelector } from 'redux/selectors';\nimport {\n  ContactLi,\n  FirstLetterContactsGroupDiv,\n  ContactContainerDiv,\n  FirstLetterNameDiv,\n  ContactCardDiv,\n  ContactContentP,\n  NameSpan,\n  PhoneSpan,\n  CallA,\n  ContainerIconSpan,\n  ContactActionsContainer,\n  EditContactBtn,\n  ContactBtn,\n  LetterContainerDiv,\n} from './ContactItem.styled';\nimport { Loader } from '../Loader/Loader';\nimport { getRandomHexColor } from '../../helpers/getRandomHexColor';\nimport Modal from '../Modal';\nimport ContactFormEdit from 'components/ContactFormEdit';\n\nconst ContactItem = ({ contact, selectedContactId, toggleActions }) => {\n  const uniqueFirstLetters = useSelector(uniqueFirstLettersContactsSelector);\n\n  const dispatch = useDispatch();\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [contactColors, setContactColors] = useState({});\n  const [isOpenModal, setIsOpenModal] = useState(false);\n\n  const { id, name, number } = contact;\n\n  const trimmedName =\n    contact.name.length > 24 ? `${contact.name.slice(0, 20)}...` : contact.name;\n\n  const isActionsContainerOpen = selectedContactId === contact.id;\n\n  const handleContactContentClick = () => {\n    toggleActions(id);\n  };\n\n  useEffect(() => {\n    if (!contactColors[contact.id]) {\n      const newColor = getRandomHexColor();\n      setContactColors(prevColors => ({\n        ...prevColors,\n        [contact.id]: newColor,\n      }));\n    }\n  }, [contact.id, contactColors]);\n\n  const onDeleteContact = contactId => {\n    setIsDeleting(true);\n    dispatch(deleteContact(contactId)).finally(() => {\n      setIsDeleting(false);\n    });\n  };\n\n  const handleEditButtonClick = () => {\n    setIsOpenModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsOpenModal(false);\n  };\n\n  return (\n    <ContactLi>\n      <ContactContainerDiv>\n        <ContactCardDiv>\n          <FirstLetterNameDiv\n            style={{ backgroundColor: contactColors[contact.id] }}\n          >\n            {name.charAt(0)}\n          </FirstLetterNameDiv>\n          <ContactContentP onClick={handleContactContentClick}>\n            <NameSpan>{trimmedName}</NameSpan>\n            <PhoneSpan>{number}</PhoneSpan>\n          </ContactContentP>\n          <CallA href={`tel:${number}`} title=\"Call\">\n            <ContainerIconSpan>\n              <BsTelephone />\n            </ContainerIconSpan>\n          </CallA>\n        </ContactCardDiv>\n\n        {isActionsContainerOpen && (\n          <ContactActionsContainer>\n            <EditContactBtn onClick={handleEditButtonClick}>\n              <BsPencil />\n              Edit\n            </EditContactBtn>\n            <ContactBtn\n              type=\"button\"\n              disabled={isDeleting}\n              onClick={() => onDeleteContact(contact.id)}\n            >\n              <BsDashCircle />\n              {isDeleting && <Loader />}\n              Delete\n            </ContactBtn>\n          </ContactActionsContainer>\n        )}\n      </ContactContainerDiv>\n      <LetterContainerDiv>\n        {uniqueFirstLetters.includes(id) && (\n          <FirstLetterContactsGroupDiv>\n            {name.charAt(0)}\n          </FirstLetterContactsGroupDiv>\n        )}\n      </LetterContainerDiv>\n      {isOpenModal && (\n        <Modal\n          contactId={contact.id}\n          onCloseModal={handleCloseModal}\n          isOpenModal={isOpenModal}\n        >\n          <ContactFormEdit contact={contact} onCloseModal={handleCloseModal} />\n        </Modal>\n      )}\n    </ContactLi>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n  selectedContactId: PropTypes.string,\n  toggleActions: PropTypes.func,\n};\n\nexport default ContactItem;\n\n","import styled from 'styled-components';\n\nexport const TitleHiddenH2 = styled.h2`\n   position: absolute;\n  white-space: nowrap;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  border: 0;\n  padding: 0;\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  margin: -1px;\n`\n\nexport const ContactsContainer = styled.div`\n  padding: 0;\n`;\n\nexport const ContactUl = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  margin-left: 1px;\n`;\n\nexport const LoaderRotatingLinesContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgb(247, 247, 247, 0.3);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  backdrop-filter: blur(4px);\n  z-index: 999;\n`;\n\nexport const EmptyContactsMessage = styled.p`\n  padding: 0;\n  margin: 20px;\n  font-size: 24px;\n  text-align: center;\n`;\n\n\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { LoaderRotatingLines } from '../Loader/Loader';\nimport ContactItem from '../ContactItem';\nimport { fetchContacts } from 'redux/operations/contactsOperations';\nimport {\n  contactsSelector,\n  errorSelector,\n  memoizedFilteredContactsSelector,\n} from 'redux/selectors';\nimport {\n  TitleHiddenH2,\n  ContactsContainer,\n  LoaderRotatingLinesContainer,\n  ContactUl,\n  EmptyContactsMessage,\n} from './ContactList.styled';\n\n\nconst ContactList = () => {\n  const error = useSelector(errorSelector);\n  const filteredContacts = useSelector(memoizedFilteredContactsSelector);\n  const contacts = useSelector(contactsSelector);\n\n  const [isFetchingContacts, setIsFetchingContacts] = useState(false);\n  const [showEmptyMessage, setShowEmptyMessage] = useState(false);\n  const [selectedContactId, setSelectedContactId] = useState(null);\n\n  const dispatch = useDispatch();\n\n  const contactsLength = contacts.length;\n  const isEmptyFilter = filteredContacts.length === 0;\n\n  useEffect(() => {\n    setIsFetchingContacts(true);\n    dispatch(fetchContacts()).finally(() => {\n      setIsFetchingContacts(false);\n      setShowEmptyMessage(true);\n    });\n  }, [dispatch]);\n\n  useEffect(() => {\n    error && toast.error(error);\n  }, [error]);\n\n  const toggleActions = contactId => {\n    setSelectedContactId(prevId => (prevId === contactId ? null : contactId));\n  };\n\n  useEffect(() => {\n    if (selectedContactId === null) {\n      toggleActions(selectedContactId);\n    }\n  }, [selectedContactId]);\n\n  if (isFetchingContacts) {\n    return (\n      <LoaderRotatingLinesContainer>\n        <LoaderRotatingLines />\n      </LoaderRotatingLinesContainer>\n    );\n  }\n\n  if (contactsLength === 0 && showEmptyMessage && !error) {\n    return (\n      <EmptyContactsMessage>Please add your first contact</EmptyContactsMessage>\n    );\n  }\n\n  if (contactsLength > 0 && isEmptyFilter) {\n    return <EmptyContactsMessage>No matching contacts</EmptyContactsMessage>;\n  }\n\n  return (\n    <section>\n      <TitleHiddenH2>Сontact list</TitleHiddenH2>\n      <ContactsContainer>\n        {!isEmptyFilter && (\n          <ContactUl>\n            {filteredContacts.map(contact => (\n              <ContactItem\n                key={contact.id}\n                contact={contact}\n                selectedContactId={selectedContactId}\n                toggleActions={toggleActions}\n              />\n            ))}\n          </ContactUl>\n        )}\n      </ContactsContainer>\n    </section>\n  );\n};\n\nexport default ContactList;\n\n\n","import styled from 'styled-components';\n\nexport const TitleHiddenH2 = styled.h2`\n   position: absolute;\n  white-space: nowrap;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  border: 0;\n  padding: 0;\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  margin: -1px;\n`\n\nexport const FormContainer = styled.div`\n  position: sticky;\n  top: 0;\n  z-index: 2;\n  padding: 30px 0 0;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n  margin-right: 20px;\n\n  @media screen and (min-width: 717px) {\n    margin-right: 0;\n  }\n`;\n\nexport const LabelForm = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  font-weight: 700;\n  font-size: 12px;\n  color: #333;\n  transition: color 300ms ease;\n  transition: font-size 300ms ease;\n\n  :focus-within {\n    color: #000;\n    font-size: 14px;\n  }\n`;\n\nexport const IconWrapper = styled.div`\n  position: absolute;\n  top: 55%;\n  left: 10px;\n  transition: color 300ms ease;\n  color: #777;\n`;\n\nexport const LabelSpan = styled.span`\n  margin-left: 6px;\n  height: 16px;\n`;\n\nexport const InputForm = styled.input`\n  min-width: 180px;\n  padding: 10px;\n  padding-left: 26px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  color: #333;\n  outline: none;\n  transition: border-color 300ms ease;\n\n  :hover,\n  :focus {\n    border-color: #27ae60;\n  }\n\n  :not(:placeholder-shown):required:valid {\n    border-color: #27ae60;\n  }\n\n  :not(:placeholder-shown):required:invalid {\n    border-color: #f4442e;\n  }\n\n  ::placeholder {\n    color: #777;\n  }\n\n  @media screen and (min-width: 844px) {\n    min-width: 250px;\n  }\n\n  @media screen and (min-width: 1024px) {\n    min-width: 390px;\n  }\n`;\n\nexport const BtnForm = styled.button`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 5px;\n  width: 100%;\n  padding: 10px;\n  font-size: 16px;\n  background-color: #27ae60;\n  color: #fff;\n  outline: none;\n  border: none;\n  border-radius: 10px;\n  cursor: ${props => (props.isLoading ? 'not-allowed' : 'pointer')};\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: box-shadow 300ms, background-color 300ms ease;\n\n  :hover,\n  :focus {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    background-color: ${props => (props.isLoading ? '#27ae60' : '#2ecc71')};\n  }\n\n  :disabled {\n    background-color: rgba(39, 174, 96, 0.6);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n    cursor: not-allowed;\n  }\n`;\n","import styled, { keyframes } from 'styled-components';\nimport { fadeInDown, fadeInUp } from 'react-animations';\n\nconst fadeInDownAnimation = keyframes`${fadeInDown}`;\nconst fadeInUpAnimation = keyframes`${fadeInUp}`;\n\nexport const ContactLi = styled.li`\n  display: flex;\n`;\n\nexport const ContactContainerDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  min-width: 210px;\n  border: 1px solid #27ae60;\n  border-radius: 10px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: background-color 300ms, border 300ms, box-shadow 300ms ease;\n\n  :hover,\n  :focus {\n    \n    background-color: #f9f9f9;\n    border: 1px solid #2ecc71;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n  }\n\n  animation: 300ms ${fadeInUpAnimation};\n\n  @media screen and (min-width: 668px) {\n    min-width: 410px;\n  }\n\n  @media screen and (min-width: 717px) {\n    min-width: 390px;\n  }\n`;\n\nexport const FirstLetterNameDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 32px;\n  min-height: 32px;\n  font-size: 14px;\n  color: #fff;\n  border-radius: 50%;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n`;\n\nexport const ContactCardDiv = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 4px 8px;\n  gap: 10px;\n`;\n\nexport const ContactContentP = styled.p`\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n  width: 100%;\n  cursor: pointer;\n`;\n\nexport const NameSpan = styled.span`\n  white-space: nowrap;\n  font-size: 16px;\n`;\nexport const PhoneSpan = styled.span`\n  font-size: 12px;\n`;\n\nexport const ContainerIconSpan = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  font-size: 14px;\n  background-color: #27ae60;\n  color: #fff;\n  border-radius: 50%;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: background-color 300ms, color 250ms ease;\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    background-color: #2ecc71;\n  }\n`;\n\nexport const ContactActionsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-top: 1px solid #27ae60;\n  background-color: #f9f9f9;\n  border-radius: 10px;\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n  gap: 60px;\n  padding: 8px 8px;\n\n  animation: 300ms ${fadeInDownAnimation};\n`;\n\n\nexport const EditContactBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2px 4px;\n  gap: 4px;\n  width: 68px;\n  height: 26px;\n  font-size: 14px;\n  background-color: #27ae60;\n  color: #fff;\n  outline: none;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: box-shadow 300ms, background-color 300ms, color 250ms ease;\n\n  :hover,\n  :focus {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    background-color: #fff;\n    color: #27ae60;\n  }\n`;\n\nexport const ContactBtn = styled.button`\n  position: relative;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  width: 68px;\n  height: 26px;\n  padding: 6px 4px;\n  font-size: 14px;\n  background-color: #f4442e;\n  color: #fff;\n  outline: none;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: box-shadow 300ms, background-color 300ms, color 250ms ease;\n\n  :hover,\n  :focus,\n  :active {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    background-color: #fff;\n    color: #f4442e;\n  }\n\n  :disabled {\n    background-color: #f4442e;\n    color: #fff;\n  }\n`;\n\n\n","import PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { BsPencil, BsDashCircle } from 'react-icons/bs';\nimport { deleteContact } from 'redux/operations/contactsOperations';\nimport {\n  ContactLi,\n  ContactContainerDiv,\n  FirstLetterNameDiv,\n  ContactCardDiv,\n  ContactContentP,\n  NameSpan,\n  PhoneSpan,\n  ContactActionsContainer,\n  EditContactBtn,\n  ContactBtn,\n} from './RecentlyAddedContactItem.styled';\nimport { Loader } from '../Loader/Loader';\nimport { getRandomHexColor } from '../../helpers/getRandomHexColor';\nimport Modal from '../Modal';\nimport ContactFormEdit from 'components/ContactFormEdit';\n\nconst RecentlyAddedContactItem = ({ contact, selectedContactId, toggleActions }) => {\n\n  const dispatch = useDispatch();\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [contactColors, setContactColors] = useState({});\n  const [isOpenModal, setIsOpenModal] = useState(false);\n\n  const { id, name, number } = contact;\n\n  const trimmedName =\n    contact.name.length > 34 ? `${contact.name.slice(0, 30)}...` : contact.name;\n\n  const isActionsContainerOpen = selectedContactId === contact.id;\n\n  const handleContactContentClick = () => {\n    toggleActions(id);\n  };\n\n  useEffect(() => {\n    if (!contactColors[contact.id]) {\n      const newColor = getRandomHexColor();\n      setContactColors(prevColors => ({\n        ...prevColors,\n        [contact.id]: newColor,\n      }));\n    }\n  }, [contact.id, contactColors]);\n\n  const onDeleteContact = contactId => {\n    setIsDeleting(true);\n    dispatch(deleteContact(contactId)).finally(() => {\n      setIsDeleting(false);\n    });\n  };\n\n  const handleEditButtonClick = () => {\n    setIsOpenModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsOpenModal(false);\n  };\n\n  return (\n    <ContactLi>\n      <ContactContainerDiv>\n        <ContactCardDiv>\n          <FirstLetterNameDiv\n            style={{ backgroundColor: contactColors[contact.id] }}\n          >\n            {name.charAt(0)}\n          </FirstLetterNameDiv>\n          <ContactContentP onClick={handleContactContentClick}>\n            <NameSpan>{trimmedName}</NameSpan>\n            <PhoneSpan>{number}</PhoneSpan>\n          </ContactContentP>\n        </ContactCardDiv>\n\n        {isActionsContainerOpen && (\n          <ContactActionsContainer>\n            <EditContactBtn onClick={handleEditButtonClick}>\n              <BsPencil />\n              Edit\n            </EditContactBtn>\n            <ContactBtn\n              type=\"button\"\n              disabled={isDeleting}\n              onClick={() => onDeleteContact(contact.id)}\n            >\n              <BsDashCircle />\n              {isDeleting && <Loader />}\n              Delete\n            </ContactBtn>\n          </ContactActionsContainer>\n        )}\n      </ContactContainerDiv>\n      {isOpenModal && (\n        <Modal\n          contactId={contact.id}\n          onCloseModal={handleCloseModal}\n          isOpenModal={isOpenModal}\n        >\n          <ContactFormEdit contact={contact} onCloseModal={handleCloseModal} />\n        </Modal>\n      )}\n    </ContactLi>\n  );\n};\n\nRecentlyAddedContactItem.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n  selectedContactId: PropTypes.string,\n  toggleActions: PropTypes.func,\n};\n\nexport default RecentlyAddedContactItem;\n\n","import styled from 'styled-components';\n\nexport const TitleH2 = styled.h2`\n  font-size: 24px;\n  font-weight: 500;\n  text-align: center;\n  margin-top: 30px;\n  margin-bottom: 30px;\n`\nexport const ContactsContainer = styled.div`\n\n  padding: 0;\n`;\n\nexport const ContactUl = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  height: 335px;\n  margin-left: 1px;\n  overflow: hidden;\n`;\n\nexport const LoaderRotatingLinesContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgb(247, 247, 247, 0.3);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  backdrop-filter: blur(4px);\n  z-index: 999;\n`;\n\nexport const EmptyContactsMessage = styled.p`\n  padding: 0;\n  margin: 20px;\n  font-size: 24px;\n  text-align: center;\n`;\n\n\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { LoaderRotatingLines } from '../Loader/Loader';\nimport RecentlyAddedContactItem from '../RecentlyAddedContactItem/RecentlyAddedContactItem'\nimport { fetchContacts } from 'redux/operations/contactsOperations';\nimport {\n  contactsSelector,\n  errorSelector,\n} from 'redux/selectors';\nimport {\n  TitleH2,\n  ContactsContainer,\n  LoaderRotatingLinesContainer,\n  ContactUl,\n} from './RecentlyAddedContacts.styled';\n\n\nconst RecentlyAddedContacts = () => {\n  const error = useSelector(errorSelector);\n  const contacts = useSelector(contactsSelector);\n\n  const [isFetchingContacts, setIsFetchingContacts] = useState(false);\n  const [selectedContactId, setSelectedContactId] = useState(null);\n\n  const dispatch = useDispatch();\n\n  const isEmptyFilter = contacts.length === 0;\n\n  useEffect(() => {\n    setIsFetchingContacts(true);\n    dispatch(fetchContacts()).finally(() => {\n      setIsFetchingContacts(false);\n    });\n  }, [dispatch]);\n\n  useEffect(() => {\n    error && toast.error(error);\n  }, [error]);\n\n  const toggleActions = contactId => {\n    setSelectedContactId(prevId => (prevId === contactId ? null : contactId));\n  };\n\n  useEffect(() => {\n    if (selectedContactId === null) {\n      toggleActions(selectedContactId);\n    }\n  }, [selectedContactId]);\n\n  if (isFetchingContacts) {\n    return (\n      <LoaderRotatingLinesContainer>\n        <LoaderRotatingLines />\n      </LoaderRotatingLinesContainer>\n    );\n  }\n\n  return (\n    <section>\n      <TitleH2>Recently added contacts</TitleH2>\n      <ContactsContainer>\n      {!isEmptyFilter && (\n          <ContactUl>\n            {contacts.slice().reverse().map(contact => (\n              <RecentlyAddedContactItem\n                key={contact.id}\n                contact={contact}\n                selectedContactId={selectedContactId}\n                toggleActions={toggleActions}\n              />\n            ))}\n          </ContactUl>\n        )}\n      </ContactsContainer>\n    </section>\n  );\n};\n\nexport default RecentlyAddedContacts;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useMediaQuery } from '@react-hook/media-query';\nimport { BsPersonPlus, BsTelephonePlus } from 'react-icons/bs';\nimport { addContact } from 'redux/operations/contactsOperations';\nimport { isLoadingSelector } from 'redux/selectors';\nimport {\n  TitleHiddenH2,\n  FormContainer,\n  Form,\n  IconWrapper,\n  LabelForm,\n  LabelSpan,\n  InputForm,\n  BtnForm,\n} from './ContactForm.styled';\n\nimport RecentlyAddedContacts from '../RecentlyAddedContacts';\n\nfunction ContactForm() {\n  const isLoading = useSelector(isLoadingSelector);\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const isLargeScreen = useMediaQuery('(min-width: 1024px)');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value.replace(/(^|\\s)\\S/g, match => match.toUpperCase()));\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleAddContact = e => {\n    e.preventDefault();\n\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const isButtonDisabled = name.trim() === '' || number.trim() === '';\n\n  return (\n    <section>\n      <TitleHiddenH2>Add contact</TitleHiddenH2>\n      <FormContainer>\n        <Form onSubmit={handleAddContact}>\n          <LabelForm>\n            <IconWrapper>\n              <BsPersonPlus />\n            </IconWrapper>\n            <LabelSpan>Name</LabelSpan>\n            <InputForm\n              type=\"text\"\n              value={name}\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-ЯґҐєЄіІїЇ]+(([' \\-][a-zA-Zа-яА-ЯґҐєЄіІїЇ ])?[a-zA-Zа-яА-ЯґҐєЄіІїЇ]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              placeholder=\"Enter name\"\n              onChange={handleChange}\n            />\n          </LabelForm>\n          <LabelForm>\n            <IconWrapper>\n              <BsTelephonePlus />\n            </IconWrapper>\n            <LabelSpan>Number</LabelSpan>\n            <InputForm\n              type=\"tel\"\n              value={number}\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              placeholder=\"Enter phone number\"\n              onChange={handleChange}\n            />\n          </LabelForm>\n\n          <BtnForm\n            type=\"submit\"\n            isLoading={isLoading}\n            disabled={isLoading || isButtonDisabled}\n          >\n            Add contact\n          </BtnForm>\n        </Form>\n\n        {isLargeScreen && <RecentlyAddedContacts />}\n      </FormContainer>\n      </section>\n  );\n}\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const ContactsContainerDiv = styled.div`\n  display: block;\n  gap: 20px;\n\n  @media screen and (min-width: 668px) {\n    display: flex; \n    justify-content: space-between;\n  }\n\n  @media screen and (min-width: 1200px) {\n    justify-content: center;\n    gap: 60px;\n  }\n`;\n\nexport const ContentContainerDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n`","import Filter from '../Filter';\nimport ContactList from '../ContactList';\nimport ContactForm from '../ContactForm';\nimport { ContactsContainerDiv, ContentContainerDiv } from './Contacts.styled';\n\nexport default function Contacts() {\n\n  return (\n    <ContactsContainerDiv>\n      <ContactForm />\n      <ContentContainerDiv> \n      <Filter />\n      <ContactList />\n      </ContentContainerDiv>\n    </ContactsContainerDiv>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/operations/contactsOperations';\nimport Contacts from '../components/Contacts';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n      <Contacts />\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const contactsSelector = state => state.contacts.items;\n\n\nconst memoizedContactsSelector = createSelector(contactsSelector, contacts =>\n  [...contacts].sort((a, b) => a.name.localeCompare(b.name))\n);\n\nexport const isLoadingSelector = state => state.contacts.isLoading;\nexport const errorSelector = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\n// export const memoizedFilteredContactsSelector = createSelector(\n//   [memoizedContactsSelector, selectFilter],\n//   (contacts, filter) => {\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(\n//       contact =>\n//         contact.name.toLowerCase().includes(normalizedFilter) ||\n//         contact.number.includes(filter)\n//     );\n//   }\n// );\n\nexport const memoizedFilteredContactsSelector = createSelector(\n  [memoizedContactsSelector, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.trim().toLowerCase();\n    \n    if (normalizedFilter.length === 1) {\n      const filteredByFirstChar = contacts.filter(\n        contact => contact.name.charAt(0).toUpperCase() === normalizedFilter.toUpperCase()\n      );\n\n      return filteredByFirstChar.sort((a, b) => a.name.localeCompare(b.name));\n    }\n\n    return contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(normalizedFilter) ||\n        contact.number.includes(filter)\n    );\n  }\n);\n\nexport const uniqueFirstLettersContactsSelector = createSelector(\n  [memoizedFilteredContactsSelector],\n  filteredContacts => {\n    const firstLetters = {};\n\n    filteredContacts.forEach(contact => {\n      const firstLetter = contact.name.charAt(0).toUpperCase();\n      if (!firstLetters[firstLetter]) {\n        firstLetters[firstLetter] = contact.id;\n      }\n    });\n\n    return Object.values(firstLetters);\n  }\n);\n\n"],"names":["FilterSection","styled","TitleHiddenH2","FilterContainer","FilterName","IconWrapper","props","isEmptyFilter","LabelP","FilterInput","LoaderContainer","filter","useSelector","selectFilter","isLoading","isLoadingSelector","memoizedFilteredContactsSelector","length","dispatch","useDispatch","useEffect","setFilter","firstChar","trim","charAt","label","isNaN","DebounceInput","element","type","value","debounceTimeout","onChange","e","target","Loader","fadeInDownAnimation","keyframes","fadeInDown","fadeInUpAnimation","fadeInUp","ContactLi","ContactContainerDiv","FirstLetterNameDiv","ContactCardDiv","ContactContentP","NameSpan","PhoneSpan","CallA","ContainerIconSpan","ContactActionsContainer","EditContactBtn","ContactBtn","LetterContainerDiv","FirstLetterContactsGroupDiv","getRandomHexColor","randomColor","Math","floor","random","toString","padStart","r","parseInt","substring","g","b","fadeInAnimation","fadeIn","fadeOutAnimation","fadeOut","zoomInAnimation","zoomIn","zoomOutAnimation","zoomOut","ModalBackdrop","ModalDiv","CloseBtn","modalRoot","document","querySelector","children","onCloseModal","isOpenModal","handleKeyDown","code","window","addEventListener","removeEventListener","createPortal","onClick","showModal","stopPropagation","FormContainer","Form","LabelForm","LabelSpan","InputForm","BtnForm","contact","useState","name","setName","number","setNumber","isModified","setIsModified","handleChange","currentTarget","replace","match","toUpperCase","handleEditContact","preventDefault","editedName","editedNumber","editContact","id","meta","requestStatus","console","error","isButtonDisabled","onSubmit","pattern","title","placeholder","disabled","selectedContactId","toggleActions","uniqueFirstLetters","uniqueFirstLettersContactsSelector","isDeleting","setIsDeleting","contactColors","setContactColors","setIsOpenModal","trimmedName","slice","isActionsContainerOpen","newColor","prevColors","handleCloseModal","style","backgroundColor","href","contactId","deleteContact","finally","includes","ContactsContainer","ContactUl","LoaderRotatingLinesContainer","EmptyContactsMessage","errorSelector","filteredContacts","contacts","contactsSelector","isFetchingContacts","setIsFetchingContacts","showEmptyMessage","setShowEmptyMessage","setSelectedContactId","contactsLength","fetchContacts","toast","prevId","map","TitleH2","reverse","isLargeScreen","useMediaQuery","addContact","required","ContactsContainerDiv","ContentContainerDiv","Contacts","ContactsPage","state","items","memoizedContactsSelector","createSelector","sort","a","localeCompare","normalizedFilter","toLowerCase","firstLetters","forEach","firstLetter","Object","values"],"sourceRoot":""}