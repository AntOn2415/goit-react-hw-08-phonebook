{"version":3,"file":"static/js/938.f8ab4a32.chunk.js","mappings":"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","sources":["components/LoginView/LoginView.styled.jsx","components/LoginView/LoginView.jsx","pages/LoginPage.js","redux/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  margin-bottom: 30px;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n`;\n\nexport const LabelForm = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  font-weight: 700;\n  font-size: 12px;\n  color: #333;\n  transition: color 300ms ease;\n  transition: font-size 300ms ease;\n\n  :focus-within {\n    color: #000;\n    font-size: 14px;\n  }\n`;\n\nexport const IconWrapper = styled.div`\n  position: absolute;\n  top: 55%;\n  left: 10px;\n  transition: color 300ms ease;\n  color: #777;\n`;\n\nexport const LabelSpan = styled.span`\n  margin-left: 6px;\n  height: 16px;\n`;\n\nexport const InputForm = styled.input`\n  min-width: 180px;\n  padding: 8px;\n  padding-left: 26px;\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  color: #333;\n  outline: none;\n  transition: border-color 300ms ease;\n\n  :hover,\n  :focus {\n    border-color: #27ae60;\n  }\n\n  :not(:placeholder-shown):required:valid {\n    border-color: #27ae60;\n  }\n\n  :not(:placeholder-shown):required:invalid {\n    border-color: #f4442e;\n  }\n\n  ::placeholder {\n    color: #777;\n  }\n`;\n\nexport const BtnForm = styled.button`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 5px;\n  width: 100%;\n  padding: 10px;\n  background-color: #27ae60;\n  color: #fff;\n  outline: none;\n  border: none;\n  border-radius: 10px;\n  cursor: ${props => (props.isLoading ? 'not-allowed' : 'pointer')};\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  transition: background-color 300ms ease;\n\n  :hover,\n  :focus {\n    background-color: ${props => (props.isLoading ? '#27ae60' : '#2ecc71')};\n  }\n`;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BsLock, BsEnvelopeAt } from 'react-icons/bs';\nimport { authOperations } from 'redux/auth';\nimport { isLoadingSelector } from 'redux/selectors';\nimport {\n  FormContainer,\n  Form,\n  IconWrapper,\n  LabelForm,\n  LabelSpan,\n  InputForm,\n  BtnForm,\n} from './LoginView.styled';\n\nfunction LoginView() {\n  const isLoading = useSelector(isLoadingSelector);\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n\n      case 'password':\n        setPassword(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(authOperations.logIn({ email, password }));\n    setEmail('');\n    setPassword('');\n  };\n\n\n  return (\n    <section>\n      <FormContainer>\n      <Form onSubmit={handleSubmit}>\n        <LabelForm>\n          <IconWrapper>\n            <BsEnvelopeAt />\n          </IconWrapper>\n          <LabelSpan>Email</LabelSpan>\n          <InputForm\n            type=\"email\"\n            value={email}\n            name=\"email\"\n            title=\"Please enter a valid email address\"\n            required\n            placeholder=\"Enter email\"\n            onChange={handleChange}\n          />\n        </LabelForm>\n        <LabelForm>\n          <IconWrapper>\n          <BsLock />\n          </IconWrapper>\n          <LabelSpan>Password</LabelSpan>\n          <InputForm\n            type=\"password\"\n            value={password}\n            name=\"password\"\n            pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d!@#$%^&*]{8,}$\"\n            title=\"Password must be at least 8 characters long and include at least one uppercase letter, one lowercase letter, and one digit.\"\n            minLength={8}\n            required\n            placeholder=\"Enter password\"\n            onChange={handleChange}\n          />\n        </LabelForm>\n\n        <BtnForm type=\"submit\" isLoading={isLoading} disabled={isLoading}>\n        Login\n        </BtnForm>\n      </Form>\n    </FormContainer>\n    </section>\n    \n  );\n}\n\nexport default LoginView;\n","import { Helmet } from 'react-helmet';\nimport  LoginView from '../components/LoginView';\n\nexport default function LoginPage () {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginView />\n    </div>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const contactsSelector = state => state.contacts.items;\n\nconst memoizedContactsSelector = createSelector(contactsSelector, contacts =>\n  [...contacts].sort((a, b) => a.name.localeCompare(b.name))\n);\n\nexport const isLoadingSelector = state => state.contacts.isLoading;\nexport const errorSelector = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const memoizedFilteredContactsSelector = createSelector(\n  [memoizedContactsSelector, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n\nexport const uniqueFirstLettersContactsSelector = createSelector(\n  [memoizedFilteredContactsSelector],\n  (filteredContacts) => {\n    const firstLetters = {};\n\n    filteredContacts.forEach((contact) => {\n      const firstLetter = contact.name.charAt(0).toUpperCase();\n      if (!firstLetters[firstLetter]) {\n        firstLetters[firstLetter] = contact.id;\n      }\n    });\n\n    return Object.values(firstLetters);\n  }\n);\n"],"names":["FormContainer","styled","Form","LabelForm","IconWrapper","LabelSpan","InputForm","BtnForm","props","isLoading","useSelector","isLoadingSelector","dispatch","useDispatch","useState","email","setEmail","password","setPassword","handleChange","e","currentTarget","name","value","onSubmit","preventDefault","authOperations","type","title","required","placeholder","onChange","pattern","minLength","disabled","LoginPage","Helmet","contactsSelector","state","contacts","items","memoizedContactsSelector","createSelector","sort","a","b","localeCompare","errorSelector","error","selectFilter","filter","memoizedFilteredContactsSelector","normalizedFilter","toLowerCase","contact","includes","uniqueFirstLettersContactsSelector","filteredContacts","firstLetters","forEach","firstLetter","charAt","toUpperCase","id","Object","values"],"sourceRoot":""}